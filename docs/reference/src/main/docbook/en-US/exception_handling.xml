<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="exception-handling">
   <title>Exception handling: Seam Catch integration</title>
   <para>
      <ulink href="http://seamframework.org/Seam3/CatchModule">Seam Catch</ulink> provides a simple, yet robust
      foundation for modules and/or applications to establish a customized exception handling process. Seam Servlet ties
      into the exception handling model by forwarding all unhandled Servlet exceptions to Catch so that they can be
      handled in a centralized, extensible and uniform manner.
   </para>
   <section id="background">
      <title>Background</title>
      <para>
         The Servlet API is extremely weak when it comes to handling exceptions. You are limited to handling exceptions
         using the built-in, declarative controls provided in web.xml. Those controls give you two options:
      </para>
      <itemizedlist>
         <listitem>send an HTTP status code</listitem>
         <listitem>forward to an error page (servlet path)</listitem>
      </itemizedlist>
      <para>
        To make matters more painful, you are required to configure these exception mappings in web.xml. It's really
        a dinosaur left over from the past. In general, the Servlet specification seems to be pretty non-chalant about
        exceptions, telling you to "handle them appropriately." But how?
      </para>
      <para>
         That's where the Catch integration in Seam Servlet comes in. The Catch integration traps all unhandled
         exceptions (those that bubble outside of the Servlet and any filters) and forwards them on to Catch. 
         Exception handlers are free to handle the exception anyway they like, either programmatically or via
         a declarative mechanism.
      </para>
      <para>
         If a exception handler registered with Catch handles the exception, then the integration closes the response
         without raising any additional exceptions. If the exception is still unhandled after Catch finishes processing
         it, then the integration allows it to pass through to the normal Servlet exception handler.
      </para>
   </section>
   <section id="defining">
      <title>Defining a exception handler for a web request</title> 
      <para>
         You can define an exception handler for a web request using the normal syntax of a Catch exception handler.
         Let's catch any exception that bubbles to the top and respond with a 500 error.
      </para>
      <programlisting role="JAVA"><![CDATA[@HandlesExceptions
public class ExceptionHandlers {
   void handleAll(@Handles CaughtException<Throwable> caught, HttpServletResponse response) {
      response.sendError(500, "You've been caught by Catch!"); 
   }
}]]></programlisting>
      <para>
         That's all there is to it! If you only want this handler to be used for exceptions
         processed by the Servlet integration (excluding web service requests like JAX-RS),
         then you can add the <literal>@ServletWebRequest</literal> qualifier to the handler:
      </para>
      <programlisting role="JAVA"><![CDATA[@HandlesExceptions
public class ExceptionHandlers {
   void handleAll(@Handles @ServletWebRequest
         CaughtException<Throwable> caught, HttpServletResponse response) {
      response.sendError(500, "You've been caught by Catch!"); 
   }
}]]></programlisting>
      <para>
         Let's consider another example. When the custom <literal>AccountNotFound</literal> exception is thrown,
         we'll send a 404 response using this handler.
      </para>
      <programlisting role="JAVA"><![CDATA[void handleAccountNotFound(@Handles @ServletWebRequest
      CaughtException<AccountNotFound> caught, HttpServletResponse response) {
   response.sendError(404, "Account not found: " + caught.getException().getAccountId()); 
}]]></programlisting>
      <para>
         In a future release, Seam Servlet will include annotations that can be used to configure these responses
         declaratively.
      </para>
   </section>
<!--
vim:et:ts=3:sw=3:tw=120
-->
</chapter>
